{"version":3,"file":"static/js/285.c424654e.chunk.js","mappings":"wUASaA,EAAWC,EAAAA,EAAAA,KAAH,mFAKRC,GAAYD,EAAAA,EAAAA,GAAOE,EAAAA,EAAPF,CAAH,oFAITG,GAAaH,EAAAA,EAAAA,GAAOI,EAAAA,EAAPJ,CAAH,wGAOhB,SAASK,IACd,IAAMC,GAAWC,EAAAA,EAAAA,MAoBjB,IAAMC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,KAAM,GACNC,MAAO,GACPC,SAAU,IAEZC,iBAAkBC,EAAAA,GAClBC,SAzBF,SAAsBC,EAAtB,GAA4C,IAAbC,EAAY,EAAZA,UAC7BZ,GACEa,EAAAA,EAAAA,IAAS,CACPR,KAAMM,EAAON,KACbC,MAAOK,EAAOL,MACdC,SAAUI,EAAOJ,YAGlBO,SACAC,MAAK,kBAAMC,IAAAA,OAAAA,QAAwB,mCAA9B,IACLC,OAAM,kBACLD,IAAAA,OAAAA,QACE,kEAFG,IAKTJ,GACD,IAYD,OACE,UAACnB,EAAD,CAAUiB,SAAUR,EAAOgB,aAA3B,WACE,SAACvB,EAAD,CACEwB,UAAQ,EACRC,aAAa,MACbC,WAAS,EACTC,GAAG,OACHjB,KAAK,OACLkB,MAAM,OACNC,YAAY,QACZC,MAAOvB,EAAOS,OAAON,KACrBqB,SAAUxB,EAAOyB,aACjBC,MAAO1B,EAAO2B,QAAQxB,MAAQyB,QAAQ5B,EAAO6B,OAAO1B,MACpD2B,WAAY9B,EAAO2B,QAAQxB,MAAQH,EAAO6B,OAAO1B,QACnD,SAACV,EAAD,CACEwB,UAAQ,EACRC,aAAa,MACbC,WAAS,EACTC,GAAG,QACHjB,KAAK,QACLkB,MAAM,QACNC,YAAY,sBACZC,MAAOvB,EAAOS,OAAOL,MACrBoB,SAAUxB,EAAOyB,aACjBC,MAAO1B,EAAO2B,QAAQvB,OAASwB,QAAQ5B,EAAO6B,OAAOzB,OACrD0B,WAAY9B,EAAO2B,QAAQvB,OAASJ,EAAO6B,OAAOzB,SACpD,SAACX,EAAD,CACEwB,UAAQ,EACRC,aAAa,MACbC,WAAS,EACTC,GAAG,WACHjB,KAAK,WACLkB,MAAM,WACNC,YAAY,WACZC,MAAOvB,EAAOS,OAAOJ,SACrBmB,SAAUxB,EAAOyB,aACjBC,MAAO1B,EAAO2B,QAAQtB,UAAYuB,QAAQ5B,EAAO6B,OAAOxB,UACxDyB,WAAY9B,EAAO2B,QAAQtB,UAAYL,EAAO6B,OAAOxB,YACvD,SAACV,EAAD,CAAYwB,WAAS,EAACY,KAAK,SAA3B,wBAGL,C,qHC/FYxB,EAA6ByB,EAAAA,KAAaC,MAAM,CAC3D9B,KAAM6B,EAAAA,GACI,+DACPf,SAAS,0BACZb,MAAO4B,EAAAA,GACG,oBACP5B,MAAM,uBACNa,SAAS,0BACZZ,SAAU2B,EAAAA,GACA,uBACPE,IAAI,EAAG,qDACPjB,SAAS,4BAGDkB,EAAwBH,EAAAA,KAAaC,MAAM,CACtD7B,MAAO4B,EAAAA,GACG,oBACP5B,MAAM,uBACNa,SAAS,0BACZZ,SAAU2B,EAAAA,GACA,uBACPE,IAAI,EAAG,qDACPjB,SAAS,4BAMDmB,EAA6BJ,EAAAA,KAAaC,MAAM,CAC3D9B,KAAM6B,EAAAA,GACI,cACPK,IAAI,GAAI,oCACRpB,SACC,qFAEJqB,OAAQN,EAAAA,KAELf,SAAS,0BACTsB,QAZH,0GAYwB,6BACrBL,IAAI,GAAI,aACRG,IAAI,GAAI,a,0JCtCAG,EAAchD,EAAAA,EAAAA,IAAH,8IAQT,SAASiD,IACtB,OAAQ,UAACD,EAAD,YACJ,SAAC,IAAD,WACE,+CAEJ,SAAC,KAAD,MAGH,C","sources":["components/RegisterForm/RegisterForm.jsx","constants/validationConstants.js","pages/Register.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport Notiflix from 'notiflix';\nimport Button from '@mui/material/Button';\nimport { TextField } from '@mui/material';\nimport { useFormik } from 'formik';\nimport { validationRegistrateSchema } from 'constants/validationConstants';\nimport styled from '@emotion/styled';\n\nexport const AuthForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`\nexport const AuthField = styled(TextField)`\n  border-bottom: 3px solid #2dcf2d;\n  border-radius: 5px;\n`\nexport const AuthButton = styled(Button)`\ncolor:#2dcf2d;\nborder: 1px solid #2dcf2d;\npadding: 10px 0;\nfont-size: 20px;\n`\n\nexport function RegisterForm() {\n  const dispatch = useDispatch();\n\n  function handleSubmit(values, {resetForm}) {\n    dispatch(\n      register({\n        name: values.name,\n        email: values.email,\n        password: values.password,\n      })\n    )\n      .unwrap()\n      .then(() => Notiflix.Notify.success('You have successfully registered'))\n      .catch(() =>\n        Notiflix.Notify.failure(\n          'Something went wrong. Reload the page or enter another email...'\n        )\n      );\n    resetForm();\n  }\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n    validationSchema: validationRegistrateSchema,\n    onSubmit: handleSubmit,\n  })\n\n  return (\n    <AuthForm onSubmit={formik.handleSubmit}>\n      <AuthField\n        required\n        autoComplete='off'\n        fullWidth\n        id=\"name\"\n        name=\"name\"\n        label=\"Name\"\n        placeholder='Jacob'\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        error={formik.touched.name && Boolean(formik.errors.name)}\n        helperText={formik.touched.name && formik.errors.name}/>\n      <AuthField\n        required\n        autoComplete='off'\n        fullWidth\n        id=\"email\"\n        name=\"email\"\n        label=\"Email\"\n        placeholder='jacob12345@mail.com'\n        value={formik.values.email}\n        onChange={formik.handleChange}\n        error={formik.touched.email && Boolean(formik.errors.email)}\n        helperText={formik.touched.email && formik.errors.email}/>\n      <AuthField\n        required\n        autoComplete='off'\n        fullWidth\n        id=\"password\"\n        name=\"password\"\n        label=\"Password\"\n        placeholder='Jacob123'\n        value={formik.values.password}\n        onChange={formik.handleChange}\n        error={formik.touched.password && Boolean(formik.errors.password)}\n        helperText={formik.touched.password && formik.errors.password} />\n      <AuthButton fullWidth type='submit'>Register</AuthButton>\n  </AuthForm>\n  );\n};","import * as yup from 'yup';\n\nexport const validationRegistrateSchema = yup.object().shape({\n  name: yup\n    .string('Name may contain only letters, apostrophe, dash and spaces.')\n    .required('This field is required'),\n  email: yup\n    .string('Enter your email')\n    .email('Enter a valid email')\n    .required('This field is required'),\n  password: yup\n    .string('Enter your password')\n    .min(8, 'Password should be of minimum 8 characters length')\n    .required('This field is required'),\n});\n\nexport const validationLogInSchema = yup.object().shape({\n  email: yup\n    .string('Enter your email')\n    .email('Enter a valid email')\n    .required('This field is required'),\n  password: yup\n    .string('Enter your password')\n    .min(8, 'Password should be of minimum 8 characters length')\n    .required('This field is required'),\n});\n\nconst phoneRegExp =\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\nexport const validationSchemaAddContact = yup.object().shape({\n  name: yup\n    .string('Enter name')\n    .max(20, 'Name may contain only 20 letters')\n    .required(\n      'This field is required and may contain only letters, apostrophe, dash and spaces.'\n    ),\n  number: yup\n    .string()\n    .required('This field is required')\n    .matches(phoneRegExp, 'Phone number is not valid')\n    .min(10, 'too short')\n    .max(10, 'too long'),\n});\n","import { Helmet } from 'react-helmet';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport styled from '@emotion/styled';\n\nexport const FormWrapper = styled.div`\n    max-width: 500px;\n    margin: 0 auto;\n    display: flex;\n    flex-direction: column;\n    text-align: center;\n`\n\nexport default function Register() {\n  return (<FormWrapper>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n    <RegisterForm />\n    </FormWrapper>\n  );\n}"],"names":["AuthForm","styled","AuthField","TextField","AuthButton","Button","RegisterForm","dispatch","useDispatch","formik","useFormik","initialValues","name","email","password","validationSchema","validationRegistrateSchema","onSubmit","values","resetForm","register","unwrap","then","Notiflix","catch","handleSubmit","required","autoComplete","fullWidth","id","label","placeholder","value","onChange","handleChange","error","touched","Boolean","errors","helperText","type","yup","shape","min","validationLogInSchema","validationSchemaAddContact","max","number","matches","FormWrapper","Register"],"sourceRoot":""}