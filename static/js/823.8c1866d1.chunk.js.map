{"version":3,"file":"static/js/823.8c1866d1.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.jsx","constants/validationConstants.js","redux/selectors.js","components/Filter/Filter.jsx","components/Form/AddContactsForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx","pages/Register.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport Notiflix from 'notiflix';\nimport Button from '@mui/material/Button';\nimport { TextField } from '@mui/material';\nimport { useFormik } from 'formik';\nimport { validationRegistrateSchema } from 'constants/validationConstants';\nimport styled from '@emotion/styled';\n\nexport const AuthForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`\nexport const AuthField = styled(TextField)`\n  border-bottom: 3px solid #2dcf2d;\n  border-radius: 5px;\n`\nexport const AuthButton = styled(Button)`\ncolor:#2dcf2d;\nborder: 1px solid #2dcf2d;\npadding: 10px 0;\nfont-size: 20px;\n`\n\nexport function RegisterForm() {\n  const dispatch = useDispatch();\n\n  function handleSubmit(values, {resetForm}) {\n    dispatch(\n      register({\n        name: values.name,\n        email: values.email,\n        password: values.password,\n      })\n    )\n      .unwrap()\n      .then(() => Notiflix.Notify.success('You have successfully registered'))\n      .catch(() =>\n        Notiflix.Notify.failure(\n          'Something went wrong. Reload the page or enter another email...'\n        )\n      );\n    resetForm();\n  }\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n    validationSchema: validationRegistrateSchema,\n    onSubmit: handleSubmit,\n  })\n\n  return (\n    <AuthForm onSubmit={formik.handleSubmit}>\n      <AuthField\n        required\n        autoComplete='off'\n        fullWidth\n        id=\"name\"\n        name=\"name\"\n        label=\"Name\"\n        placeholder='Jacob'\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        error={formik.touched.name && Boolean(formik.errors.name)}\n        helperText={formik.touched.name && formik.errors.name}/>\n      <AuthField\n        required\n        autoComplete='off'\n        fullWidth\n        id=\"email\"\n        name=\"email\"\n        label=\"Email\"\n        placeholder='jacob12345@mail.com'\n        value={formik.values.email}\n        onChange={formik.handleChange}\n        error={formik.touched.email && Boolean(formik.errors.email)}\n        helperText={formik.touched.email && formik.errors.email}/>\n      <AuthField\n        required\n        autoComplete='off'\n        fullWidth\n        id=\"password\"\n        name=\"password\"\n        label=\"Password\"\n        placeholder='Jacob123'\n        value={formik.values.password}\n        onChange={formik.handleChange}\n        error={formik.touched.password && Boolean(formik.errors.password)}\n        helperText={formik.touched.password && formik.errors.password} />\n      <AuthButton fullWidth type='submit'>Register</AuthButton>\n  </AuthForm>\n  );\n};","import * as yup from 'yup';\n\nexport const validationRegistrateSchema = yup.object().shape({\n  name: yup\n    .string('Name may contain only letters, apostrophe, dash and spaces.')\n    .required('This field is required'),\n  email: yup\n    .string('Enter your email')\n    .email('Enter a valid email')\n    .required('This field is required'),\n  password: yup\n    .string('Enter your password')\n    .min(8, 'Password should be of minimum 8 characters length')\n    .required('This field is required'),\n});\n\nexport const validationLogInSchema = yup.object().shape({\n  email: yup\n    .string('Enter your email')\n    .email('Enter a valid email')\n    .required('This field is required'),\n  password: yup\n    .string('Enter your password')\n    .min(8, 'Password should be of minimum 8 characters length')\n    .required('This field is required'),\n});\n\nconst phoneRegExp =\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\nexport const validationSchemaAddContact = yup.object().shape({\n  name: yup\n    .string('Enter name')\n    .max(20, 'Name may contain only 20 letters')\n    .required(\n      'This field is required and may contain only letters, apostrophe, dash and spaces.'\n    ),\n  number: yup\n    .string()\n    .required('This field is required')\n    .matches(phoneRegExp, 'Phone number is not valid')\n    .min(10, 'too short')\n    .max(10, 'too long'),\n});\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport function selectContacts(state) {\n  return state.contacts.items;\n}\nexport function selectFilter(state) {\n  return state.filter;\n}\n\nexport function selectIsLoading(state) {\n  return state.contacts.isLoading;\n}\n\nexport function selectError(state) {\n  return state.contacts.error;\n}\n\nexport const visibleContacts = createSelector(\n  [selectFilter, selectContacts],\n  (filter, contacts) => {\n    const normalizedFilter = filter.trim().toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.trim().toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import { useDispatch } from \"react-redux\"\nimport { setFilter } from \"redux/filterSlice\"\nimport { nanoid } from \"nanoid\"\nimport { Input } from \"@mui/material\"\nimport styled from \"@emotion/styled\"\n\nconst FilterInput = styled(Input)`\nheight: 25px;\npadding-left: 5px;\nheight: 25px;\nmargin-bottom: 15px;\ncolor: green;\n`\nconst SearchText = styled.p`\nfont-weight: 500;\nmargin-top: 20px;\nmargin-bottom: 10px;\n`\n\nexport function Filter() {\n    const dispatch = useDispatch();\n    return <div style={{margin: '0 auto', display: 'contents'}}>\n        <SearchText>Find contacts by name:</SearchText>\n        <FilterInput placeholder=\"Type here to search\" type=\"text\" onChange={e => dispatch(setFilter(e.currentTarget.value))} id={nanoid()} />\n    </div>\n}","import { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from \"redux/operations\"; \nimport { selectContacts } from \"redux/selectors\";\nimport Notiflix from \"notiflix\";\nimport { useFormik } from 'formik';\nimport { AuthForm, AuthButton, AuthField } from \"components/RegisterForm/RegisterForm\";\nimport { validationSchemaAddContact } from \"constants/validationConstants\";\n\nexport function AddContactsForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  \n  function handleSubmit({name, number}, {resetForm}) {\n    const isExist = contacts.find(contact => { return contact.name === name || contact.number === number })\n    if (isExist) {\n      resetForm();\n      return Notiflix.Notify.failure(`${name} is already in contacts...`, {timeout: 2000})\n    };\n    \n    dispatch(addContact({ name, number }))\n    .unwrap()\n      .then()\n      .catch(() =>\n        Notiflix.Notify.failure('Something went wrong...Try reloading the page')\n      );\n    resetForm();\n  }\n  \n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    validationSchema: validationSchemaAddContact,\n    onSubmit: handleSubmit,\n  })\n      \n  return (\n    <AuthForm onSubmit={formik.handleSubmit}>\n      <AuthField\n        type='text'\n        required\n        autoComplete='off'\n        fullWidth\n        id=\"name\"\n        name=\"name\"\n        label=\"Name\"\n        placeholder='Jacob'\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        error={formik.touched.name && Boolean(formik.errors.name)}\n        helperText={formik.touched.name && formik.errors.name} />\n      <AuthField\n        type='tel'\n        required\n        autoComplete='off'\n        fullWidth\n        id=\"number\"\n        name=\"number\"\n        label=\"Number\"\n        placeholder='1234567890'\n        value={formik.values.number}\n        onChange={formik.handleChange}\n        error={formik.touched.number && Boolean(formik.errors.number)}\n        helperText={formik.touched.number && formik.errors.number} />\n      <AuthButton fullWidth type='submit'>Add contact</AuthButton>\n    </AuthForm>\n  );\n};\n","import { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"redux/operations\";\nimport { MdContacts } from \"react-icons/md\"\nimport Button from '@mui/material/Button';\n\n\nexport function ContactItem({ contact: { name, number, id }}) {\nconst dispatch = useDispatch();\nfunction handleDelete() {dispatch(deleteContact(id))} \n    return <>\n        <p><MdContacts size='20px' style={{marginRight: \"10px\", color: '#2dcf2d'}}/> {name}  :  {number}</p>\n        <Button style={{color: \"#2dcf2d\"}} variant=\"outlined\" size=\"small\" type=\"button\" onClick={handleDelete}>Delete</Button>\n    </>\n}","import { useSelector } from \"react-redux\";\nimport { visibleContacts } from \"redux/selectors\";\nimport { ContactItem } from \"components/ContactItem/ContactItem\"\nimport styled from \"@emotion/styled\";\n\nconst ContactLi = styled.li`\ndisplay: flex;\nalign-items: center;\njustify-content: space-between;\nborder: 1px solid rgb(45, 207, 45);\nborder-radius: 5px;\npadding: 5px 10px;\n& p {\n    display: flex;\n    align-items: center;\n}\n& button {\n    padding: 5px 10px;\n    border: 1px solid rgb(45, 207, 45);\n    border-radius: 5px;\n}\n`\nconst ContactsUl = styled.ul`\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n`\n\nexport function ContactList() {\n  const contacts = useSelector(visibleContacts);\n    \n  return <ContactsUl>\n        {contacts.map(contact => {\n            return <ContactLi key={contact.id}><ContactItem contact={contact} /></ContactLi>\n        })}\n    </ContactsUl>\n}\n\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts, selectError, selectIsLoading } from 'redux/selectors';\nimport { fetchContacts } from 'redux/operations';\nimport { Filter } from 'components/Filter/Filter';\nimport { AddContactsForm } from 'components/Form/AddContactsForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { DotLoader } from \"react-spinners\";\nimport { Helmet } from 'react-helmet';\nimport styled from '@emotion/styled';\nimport { FormWrapper } from './Register';\n\nconst EmptyWarn = styled.p`\n  color: #2dcf2d;\n  margin-top: 15px;\n  font-weight: 500;\n  font-size: 20px;\n`\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n  <FormWrapper>\n  {error && <p style={{ fontSize: \"25px\", fontWeight: \"600\" }}>Something went wrong, please reload the page :(</p>}\n  {!error && <p style={{fontSize: \"35px\", fontWeight: \"600\", color: \"#2dcf2d\", marginBottom: '20px'}}>Add contacts here</p>}\n  {!error && <AddContactsForm />}\n  {!error && <p style={{ fontSize: \"35px\", fontWeight: \"600\", color: \"#2dcf2d\", marginTop: '20px' }}>Contacts</p>}\n  <Helmet>\n        <title>Your Contacts</title>\n  </Helmet>\n  {isLoading && !error &&\n    <DotLoader\n      color=\"#2dcf2d\"\n      cssOverride={{\n        display: 'block',\n        margin: '0 auto',\n      }}/>\n  }\n  {contacts.length !== 0 && <Filter/>}\n  {contacts.length !== 0 && <ContactList />}\n  {contacts.length === 0 && !error && <EmptyWarn>Your contact list is empty yet...</EmptyWarn>}\n</FormWrapper>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport styled from '@emotion/styled';\n\nexport const FormWrapper = styled.div`\n    max-width: 500px;\n    margin: 0 auto;\n    display: flex;\n    flex-direction: column;\n    text-align: center;\n`\n\nexport default function Register() {\n  return (<FormWrapper>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n    <RegisterForm />\n    </FormWrapper>\n  );\n}"],"names":["AuthForm","styled","AuthField","TextField","AuthButton","Button","RegisterForm","dispatch","useDispatch","formik","useFormik","initialValues","name","email","password","validationSchema","validationRegistrateSchema","onSubmit","values","resetForm","register","unwrap","then","Notiflix","catch","handleSubmit","required","autoComplete","fullWidth","id","label","placeholder","value","onChange","handleChange","error","touched","Boolean","errors","helperText","type","yup","shape","min","validationLogInSchema","validationSchemaAddContact","max","number","matches","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","visibleContacts","createSelector","filter","normalizedFilter","trim","toLowerCase","contact","includes","FilterInput","Input","SearchText","Filter","style","margin","display","e","setFilter","currentTarget","nanoid","AddContactsForm","useSelector","find","timeout","addContact","ContactItem","size","marginRight","color","variant","onClick","deleteContact","ContactLi","ContactsUl","ContactList","map","EmptyWarn","Contacts","useEffect","fetchContacts","FormWrapper","fontSize","fontWeight","marginBottom","marginTop","Helmet","DotLoader","cssOverride","length","Register"],"sourceRoot":""}