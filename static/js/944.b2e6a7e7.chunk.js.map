{"version":3,"file":"static/js/944.b2e6a7e7.chunk.js","mappings":"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","sources":["redux/selectors.js","components/Filter/Filter.jsx","components/Form/Form.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport function selectContacts(state) {\n  return state.contacts.items;\n}\nexport function selectFilter(state) {\n  return state.filter;\n}\n\nexport function selectIsLoading(state) {\n  return state.contacts.isLoading;\n}\n\nexport function selectError(state) {\n  return state.contacts.error;\n}\n\nexport const visibleContacts = createSelector(\n  [selectFilter, selectContacts],\n  (filter, contacts) => {\n    const normalizedFilter = filter.trim().toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.trim().toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import { useDispatch } from \"react-redux\"\nimport { setFilter } from \"redux/filterSlice\"\nimport { nanoid } from \"nanoid\"\nimport { Input } from \"@mui/material\"\nimport styled from \"@emotion/styled\"\n\nconst FilterInput = styled(Input)`\nheight: 25px;\nwidth: 380px;\npadding-left: 5px;\nheight: 25px;\nmargin-bottom: 15px;\ncolor: green;\n`\nconst SearchText = styled.p`\nfont-weight: 600;\nmargin-top: 20px;\nmargin-bottom: 10px;\n`\n\nexport function Filter() {\n    const dispatch = useDispatch();\n    return <div style={{margin: '0 auto'}}>\n        <SearchText>Find contacts by name:</SearchText>\n        <FilterInput placeholder=\"Type here to search\" type=\"text\" onChange={e => dispatch(setFilter(e.currentTarget.value))} id={nanoid()} />\n    </div>\n}","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from \"redux/operations\"; \nimport { selectContacts } from \"redux/selectors\";\nimport Notiflix from \"notiflix\";\nimport { Button } from \"@mui/material\";\nimport Box from '@mui/material/Box';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport FormControl from '@mui/material/FormControl';\nimport Input from '@mui/material/InputLabel';\nimport styled from \"@emotion/styled\";\n\nconst AddContactButton = styled(Button)`\n  display: flex;\n    border: 2px solid rgb(45, 207, 45);\n    color: #2dcf2d;\n    border-color: #2dcf2d;\n    transition: transform 500ms cubic-bezier(0.165, 0.84, 0.44, 1), border 500ms cubic-bezier(0.165, 0.84, 0.44, 1);\n\n    &:hover,\n    &:focus {\n    transform: scale(1.01);\n    border: 2px solid rgb(48, 149, 48);\n    }\n`\n\nexport function Form() {\n  const [name, setName] = useState('')\n  const [number, setNumber] = useState('')\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n    function handleChange(e) {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        throw new Error(\"There isn't such option\");\n    }\n  };\n  \n  function handleSubmit(e) {\n    e.preventDefault();\n    const name = e.target.elements.name.value;\n    const number = e.target.elements.number.value;\n\n    const isExist = contacts.find(contact => { return contact.name === name || contact.number === number })\n    if (isExist) {\n        setName('');\n        setNumber('');\n          return Notiflix.Notify.failure(`${name} is already in contacts...`, {timeout: 2000})\n    };\n    \n    dispatch(addContact({name, number}));\n    setName('');\n    setNumber('');\n    }\n      \n      return <Box component='form' style={{gap: \"20px\", display: 'flex', flexDirection: 'column'}}  sx={{\n        '& > :not(style)': { width: 500,\n        maxWidth: '100%', borderColor: '#2dcf2d' },\n      }} \n        autoComplete=\"off\" onSubmit={handleSubmit}>\n        <FormControl  style={{borderBottom: '3px solid #2dcf2d', borderRadius: '5px'}}>\n        <Input htmlFor=\"component-outlined\">Name</Input>\n        <OutlinedInput inputProps={{ inputMode: 'text', pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\" }}\n        value={name}\n        type='text'\n        id=\"component-outlined\"\n        label=\"name\"\n        name='name'\n        onChange={handleChange}\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        />\n        </FormControl>\n        <FormControl style={{borderBottom: '3px solid #2dcf2d', borderRadius: '5px'}}>\n        <Input htmlFor=\"component-outlined\">Phone</Input>\n        <OutlinedInput inputProps={{ inputMode: 'numeric', pattern: \"[0-9]{3}-[0-9]{3}-[0-9]{3}\" }}\n        id=\"component-outlined\"\n        type=\"text\"\n        value={number}\n        label=\"number\"\n        name=\"number\"\n        onChange={handleChange}\n        title=\"Phone number must contain numbers and dashes, for example: 111-111-111\"\n        required\n        />\n        </FormControl>\n        <AddContactButton variant=\"outlined\" type=\"submit\">Add contact</AddContactButton>\n      </Box>\n    \n}\n","import { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"redux/operations\";\nimport { MdContactPhone } from \"react-icons/md\"\nimport Button from '@mui/material/Button';\n\n\nexport function ContactItem({ contact: { name, number, id }}) {\nconst dispatch = useDispatch();\nconst handleDelete = () => dispatch(deleteContact(id))\n    return <>\n        <p><MdContactPhone style={{marginRight: \"10px\", color: '#2dcf2d'}}/> {name}  :  {number}</p>\n        <Button style={{color: \"#2dcf2d\"}} variant=\"outlined\" size=\"small\" type=\"button\" onClick={handleDelete}>Delete</Button>\n    </>\n}","import { useSelector } from \"react-redux\";\nimport { visibleContacts } from \"redux/selectors\";\nimport { ContactItem } from \"components/ContactItem/ContactItem\"\nimport styled from \"@emotion/styled\";\n\nconst ContactLi = styled.li`\nwidth: 500px;\ndisplay: flex;\nalign-items: center;\njustify-content: space-between;\n\n& p {\n    font-weight: bold;\n    display: flex;\n    align-items: flex-end;\n}\n\n& button {\n    padding: 5px 10px;\n    border: 1px outset rgb(45, 207, 45);\n    border-radius: 5px;\n    transition: transform 500ms cubic-bezier(0.165, 0.84, 0.44, 1), border 500ms cubic-bezier(0.165, 0.84, 0.44, 1);\n\n    &:hover,\n    &:focus {\n    transform: scale(1.05);\n    border: 1px outset rgb(48, 149, 48);\n    }\n}\n`\n\nexport function ContactList() {\n  const contacts = useSelector(visibleContacts);\n    \n  return <ul style={{display: 'flex', flexDirection: 'column', gap: '10px'}}>\n        {contacts.map(contact => {\n            return <ContactLi key={contact.id}><ContactItem contact={contact} /></ContactLi>\n        })}\n    </ul>\n}\n\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts, selectError, selectIsLoading } from 'redux/selectors';\nimport { fetchContacts } from 'redux/operations';\nimport { Filter } from 'components/Filter/Filter';\nimport { Form } from 'components/Form/Form';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { DotLoader } from \"react-spinners\";\nimport { Helmet } from 'react-helmet';\nimport styled from '@emotion/styled';\n\nconst ContactWrapper = styled.div`\n  margin: 0 auto;\n  display: flex;\n  align-items: center;\n  width: 600px;\n  flex-direction: column;\n  background-color: #eeffee;\n  padding: 20px 10px;\n  border-radius: 10px;\n`\nconst EmptyWarn = styled.p`\n  color: #2dcf2d;\n  margin-top: 15px;\n  font-weight: 500;\n  font-size: 20px;\n`\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n  <ContactWrapper>\n  {error && <p style={{ fontSize: \"25px\", fontWeight: \"600\" }}>Something went wrong, please reload the page :(</p>}\n  {!error && <p style={{fontSize: \"35px\", fontWeight: \"700\", color: \"#2dcf2d\", marginBottom: '20px'}}>Phonebook</p>}\n  {!error && <Form />}\n  {!error && <p style={{ fontSize: \"35px\", fontWeight: \"700\", color: \"#2dcf2d\", marginTop: '20px' }}>Contacts</p>}\n  <Helmet>\n        <title>Your Contacts</title>\n  </Helmet>\n  {isLoading && !error &&\n    <DotLoader\n      color=\"#2dcf2d\"\n      cssOverride={{\n        display: 'block',\n        margin: '0 auto',\n      }}/>\n  }\n  {contacts.length !== 0 && <Filter/>}\n  {contacts.length !== 0 && <ContactList />}\n  {contacts.length === 0 && !error && <EmptyWarn>Your contact list is empty...</EmptyWarn>}\n</ContactWrapper>\n  );\n};\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","visibleContacts","createSelector","filter","normalizedFilter","trim","toLowerCase","contact","name","includes","FilterInput","styled","Input","SearchText","Filter","dispatch","useDispatch","style","margin","placeholder","type","onChange","e","setFilter","currentTarget","value","id","nanoid","AddContactButton","Button","Form","useState","setName","number","setNumber","useSelector","handleChange","target","Error","Box","component","gap","display","flexDirection","sx","width","maxWidth","borderColor","autoComplete","onSubmit","preventDefault","elements","find","Notiflix","timeout","addContact","FormControl","borderBottom","borderRadius","htmlFor","OutlinedInput","inputProps","inputMode","pattern","label","title","required","variant","ContactItem","marginRight","color","size","onClick","deleteContact","ContactLi","ContactList","map","ContactWrapper","EmptyWarn","Contacts","useEffect","fetchContacts","fontSize","fontWeight","marginBottom","marginTop","Helmet","DotLoader","cssOverride","length"],"sourceRoot":""}